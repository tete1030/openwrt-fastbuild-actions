#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX (for build-direct job)
# Blog: https://p3terx.com
#=================================================

#=================================================
# https://github.com/tete1030/openwrt-fastbuild-actions
# Description: FAST building OpenWrt with Github Actions and Docker!
# Lisence: MIT
# Author: Texot (for docker-* jobs)
#=================================================

# If you want to tweak the options, please be sure you understand them.
# 如果你想更改参数，确保在理解它们的前提下进行
env:
  # Specify here the name and tag you want to use for the builders, they will be used for your docker hub repository
  # For BUILDER_NAME: due to docker's limitation, only allowing lowercase letters, digits and separators (period, underscores, dashes)
  # For BUILDER_TAG: lowercase and uppercase letters, digits, underscores, periods and dashes
  # 在这里自定义你想使用的Builder名和默认Tag，这将被用作Docker Hub仓库的名字和Tag
  # 对于BUILDER_NAME，由于docker的限制，仅能使用小写字母、数字和分隔符（英文句号，下划线，横杠）
  # 对于BUILDER_TAG，能使用大小写字母、数字和分隔符
  BUILDER_NAME: openwrt
  BUILDER_TAG: latest
  # Specify here the OpenWrt Repo URL and Branch
  # 在这里指定你的OpenWrt的Repo URL和Branch
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  # REPO_URL: https://github.com/openwrt/openwrt
  # REPO_BRANCH: openwrt-19.07
  # Specify here your config file
  # 在这里指定你的配置文件名
  CONFIG_FILE: 'config.diff'
  # Leave it empty if you are using the default Docker Hub
  # 如果你想使用默认的Docker Hub，此处留空
  DK_REGISTRY: ''
  # DO NOT CHANGE the following here, set them only in forked repo's Settings->Secrets page
  # 安全起见以下参数请不要在此更改，在你Fork的repo中，Settings->Secrets页面更改
  DK_USERNAME: ${{secrets.docker_username}}
  DK_PASSWORD: ${{secrets.docker_password}}
  SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
  # Not recommended to change unless you understand how it is used
  # 以下参数不推荐修改
  DK_BUILDX_DRIVER: docker
  DK_CONTEXT: .
  DK_NO_REMOTE_CACHE: 1
  DK_NO_BUILDTIME_PUSH: 1
  DK_CONVERT_MULTISTAGE_TO_IMAGE: 1
  DOCKERFILE_BASE: Dockerfile
  DOCKERFILE_INC: Dockerfile-inc
  DOCKERFILE_PACKAGE: Dockerfile-package

name: Build OpenWrt

on:
  deployment:
  repository_dispatch:
  push:
  #  branches: 
  #    - master
    paths:
      - 'config.diff'
  ## If you want to use 'watch', 'schedule' events, make sure you also have changed the jobs' `if` condition.
  ## For 'schedule', see examples in: https://crontab.guru/examples.html
  ##     e.g. every sunday midnight: '0 0 * * 0' every midnight: '0 0 * * *'
  # schedule:
  #   - cron: '0 0 * * 0'
  # watch:
  #   types: [started]

jobs:
  build-inc:
    runs-on: ubuntu-latest
    # Always activate this job, unless specified '#build-package#'
    # * You can change Line 3 to the following one to only build when push with '#build-inc#'
    #     && contains(github.event.head_commit.message, '#build-inc#')
    # * To build on schedule event, add OR condition:
    #     github.event_name == 'schedule'
    # * To build when YOU stars YOUR OWN project, add OR condition:
    #     github.event_name == 'watch' && github.event.action == 'started' && github.event.repository.owner.id == github.event.sender.id
    # For `github.event` structures, see: https://developer.github.com/v3/activity/events/types/
    if: |
      (
        github.event_name == 'push'
        && !contains(github.event.head_commit.message, '#build-package#')
      ) || (
        github.event_name == 'repository_dispatch'
        && github.event.action == 'build-inc'
      ) || (
        github.event_name == 'deployment'
        && github.event.deployment.task == 'build-inc'
      )
    name: ${{matrix.title}}
    strategy:
      fail-fast: true
      matrix:
        mode: [normal, test]
        include:
        - mode: normal
          title: build-inc
        - mode: test
          title: Fast checking build-inc
    env:
      # Not recommended to change as they are already in optimal condition
      # 不推荐修改，已处在最优状态
      DK_BUILD_ARGS: 'REPO_URL REPO_BRANCH CONFIG_FILE DK_IMAGE_BASE OPT_UPDATE_REPO OPT_UPDATE_FEEDS'

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Init test env
      if: matrix.mode == 'test'
      run: |
        for var_dockerfile in ${!DOCKERFILE_@}; do
          echo "::set-env name=${var_dockerfile}::tests/${!var_dockerfile}"
        done
        echo "::set-env name=BUILDER_TAG::test-${BUILDER_TAG}"
        echo "::set-env name=TEST::1"

    - name: Init build env
      run: |
        export BUILDER_NAME="${DK_USERNAME}/${BUILDER_NAME}"
        export BUILDER_TAG_INC="${BUILDER_TAG}-inc"
        export BUILDER_ID_BASE="${DK_REGISTRY:+$DK_REGISTRY/}${BUILDER_NAME}:${BUILDER_TAG}"
        export BUILDER_ID_INC="${DK_REGISTRY:+$DK_REGISTRY/}${BUILDER_NAME}:${BUILDER_TAG_INC}"
        export BUILDER_ID_PACKAGE="${DK_REGISTRY:+$DK_REGISTRY/}${BUILDER_NAME}:${BUILDER_TAG}-package"
        echo "::set-env name=BUILDER_ID_BASE::${BUILDER_ID_BASE}"
        echo "::set-env name=BUILDER_ID_INC::${BUILDER_ID_INC}"

        echo "::set-env name=DK_IMAGE_BASE::${BUILDER_ID_INC}"
        echo "::set-env name=DK_IMAGE_NAME::${BUILDER_NAME}"
        echo "::set-env name=DK_IMAGE_TAG::${BUILDER_TAG_INC}"

        for var_dockerfile in ${!DOCKERFILE_@}; do
          eval ${var_dockerfile}="Dockerfiles/${!var_dockerfile}"
          echo "::set-env name=${var_dockerfile}::${!var_dockerfile}"
        done
        echo "::set-env name=DK_DOCKERFILE::${DOCKERFILE_INC}"

        OPT_UPDATE_FEEDS=0
        [ "x${{ (github.event_name == 'push' && contains(github.event.head_commit.message, '#update_feeds#')) || github.event.client_payload.update_feeds || github.event.deployment.payload.update_feeds }}" != "xtrue" ] || OPT_UPDATE_FEEDS=1
        echo "::set-env name=OPT_UPDATE_FEEDS::${OPT_UPDATE_FEEDS}"
        OPT_UPDATE_REPO=0
        [ "x${{ (github.event_name == 'push' && contains(github.event.head_commit.message, '#update_repo#')) || github.event.client_payload.update_repo || github.event.deployment.payload.update_repo }}" != "xtrue" ] || OPT_UPDATE_REPO=1
        echo "::set-env name=OPT_UPDATE_REPO::${OPT_UPDATE_REPO}"

        OPT_USE_BASE=0
        [ "x${{ (github.event_name == 'push' && contains(github.event.head_commit.message, '#use_base#')) || github.event.client_payload.use_base || github.event.deployment.payload.use_base }}" != "xtrue" ] || OPT_USE_BASE=1
        echo "::set-env name=OPT_USE_BASE::${OPT_USE_BASE}"

        OPT_REBUILD=0
        [ "x${{ (github.event_name == 'push' && contains(github.event.head_commit.message, '#rebuild#')) || github.event.client_payload.rebuild || github.event.deployment.payload.rebuild }}" != "xtrue" ] || OPT_REBUILD=1
        echo "::set-env name=OPT_REBUILD::${OPT_REBUILD}"

        OPT_DEBUG=0
        [ "x${{ (github.event_name == 'push' && contains(github.event.head_commit.message, '#debug#')) || github.event.client_payload.debug || github.event.deployment.payload.debug }}" != "xtrue" ] || OPT_DEBUG=1
        echo "::set-env name=OPT_DEBUG::${OPT_DEBUG}"

        OPT_PUSH_WHEN_FAIL=0
        [ "x${{ (github.event_name == 'push' && contains(github.event.head_commit.message, '#push_when_fail#')) || github.event.client_payload.push_when_fail || github.event.deployment.payload.push_when_fail }}" != "xtrue" ] || OPT_PUSH_WHEN_FAIL=1
        echo "::set-env name=OPT_PUSH_WHEN_FAIL::${OPT_PUSH_WHEN_FAIL}"

        [ "x${TEST}" = "x1" ] || scripts/cleanup.sh

    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - name: Configure docker
      run: |
        . docker.sh
        configure_docker
        login_to_registry

    - name: Check status of builders
      run: |
        . docker.sh
        if [ "x${OPT_REBUILD}" != "x1" ]; then
          # temporarily disable failure guarder
          set +eo pipefail
            docker buildx imagetools inspect "${BUILDER_ID_INC}" 2>&1 >/dev/null
            builder_inc_ret_val=$?
          set -eo pipefail

          if [ "x${OPT_USE_BASE}" = "x1" -o "x${builder_inc_ret_val}" != "x0" ]; then
            set +eo pipefail
              docker buildx imagetools inspect "${BUILDER_ID_BASE}" 2>&1 >/dev/null
              builder_base_ret_val=$?
            set -eo pipefail
            if [ "x${builder_base_ret_val}" != "x0" ]; then
              echo "Base builder '${BUILDER_ID_BASE}' does not exist, creating one"
              OPT_REBUILD=1
            else
              echo "Creating incremental builder '${BUILDER_ID_INC}' from base builder '${BUILDER_ID_BASE}'"
              create_remote_tag_alias "${BUILDER_ID_BASE}" "${BUILDER_ID_INC}"
            fi
          fi
        fi

        if [ "x${OPT_REBUILD}" = "x1" ]; then
          echo "Re-creating base builder '${BUILDER_ID_BASE}'"
          echo "::set-env name=DK_DOCKERFILE::${DOCKERFILE_BASE}"
        fi
        echo "::set-env name=OPT_REBUILD::${OPT_REBUILD}"

    - name: Download last incremental builder
      if: env.OPT_REBUILD == '0'
      run: |
        . docker.sh
        pull_image

    - name: Initialize environment for base builder
      if: env.OPT_REBUILD == '1'
      run: |
        . docker.sh
        build_image init-env

    - name: Clone/update source codes
      run: |
        . docker.sh
        build_image clone

    # Allow intermediate customization
    - name: Debug set, wait for SSH connection (timeout 5min)
      if: env.OPT_DEBUG == '1'
      env:
        TIMEOUT_MIN: 5
        TMATE_DOCKER_IMAGE: ${{env.DK_LAST_BUILD_TARGET}}
      uses: tete1030/debugger-action@my

    - name: Apply customizations
      run: |
        . docker.sh
        build_image custom

    - name: Download packages
      run: |
        . docker.sh
        build_image download

    - name: Print disk space
      run: df -h

    - name: Compile firmware and packages
      run: |
        . docker.sh
        build_image compile

    - name: Print disk space
      run: df -h

    - name: Upload current builder
      if: |
        !cancelled() && (
          success()
          || env.PUSH_WHEN_FAIL == '1'
        )
      run: |
        . docker.sh
        push_image_and_cache
        if [ "x${OPT_REBUILD}" = "x1" ]; then
          create_remote_tag_alias "${BUILDER_ID_INC}" "${BUILDER_ID_BASE}"
        fi

    - name: Copy out bin directory
      id: copydir
      if: (!cancelled())
      run: |
        . docker.sh
        if [ ! -d "$(pwd)/openwrt" ]; then
          mkdir "$(pwd)/openwrt"
        fi
        copy_files /home/builder/openwrt/bin "$(pwd)/openwrt/bin"
        echo "::set-output name=status::success"

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.copydir.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.copydir.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "::set-output name=status::success"
  
    - name: Upload firmware
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    # failure checking
    - name: Failed/debug set, wait for SSH connection (timeout 30min. You are safe to cancel the job now.)
      if: |
        failure()
        || env.OPT_DEBUG == '1'
      env:
        TMATE_DOCKER_IMAGE: ${{env.DK_LAST_BUILD_TARGET}}
      uses: tete1030/debugger-action@my

  build-package:
    runs-on: ubuntu-18.04
    # Activate this job when specified '#build-package#'
    # * To build on schedule event, add OR condition:
    #     github.event_name == 'schedule'
    # * To build when YOU stars YOUR OWN project, add OR condition:
    #     github.event_name == 'watch' && github.event.action == 'started' && github.event.repository.owner.id == github.event.sender.id
    # For `github.event` structures, see: https://developer.github.com/v3/activity/events/types/
    if: |
      (
        github.event_name == 'push'
        && contains(github.event.head_commit.message, '#build-package#')
      ) || (
        github.event_name == 'repository_dispatch'
        && github.event.action == 'build-package'
      ) || (
        github.event_name == 'deployment'
        && github.event.deployment.task == 'build-package'
      )
    name: ${{matrix.title}}
    strategy:
      fail-fast: true
      matrix:
        mode: [normal, test]
        include:
        - mode: normal
          title: build-package
        - mode: test
          title: Fast checking build-package
    env:
      # Not recommended to change as they are already in optimal condition
      # 不推荐修改，已处在最优状态
      DK_BUILD_ARGS: 'CONFIG_FILE DK_IMAGE_BASE OPT_UPDATE_FEEDS'

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Init test env
      if: matrix.mode == 'test'
      run: |
        for var_dockerfile in ${!DOCKERFILE_@}; do
          echo "::set-env name=${var_dockerfile}::tests/${!var_dockerfile}"
        done
        echo "::set-env name=BUILDER_TAG::test-${BUILDER_TAG}"
        echo "::set-env name=TEST::1"

    - name: Init build env
      run: |
        export BUILDER_NAME="${DK_USERNAME}/${BUILDER_NAME}"
        export BUILDER_TAG_PACKAGE="${BUILDER_TAG}-package"
        export BUILDER_ID_BASE="${DK_REGISTRY:+$DK_REGISTRY/}${BUILDER_NAME}:${BUILDER_TAG}"
        export BUILDER_ID_INC="${DK_REGISTRY:+$DK_REGISTRY/}${BUILDER_NAME}:${BUILDER_TAG}-inc"
        export BUILDER_ID_PACKAGE="${DK_REGISTRY:+$DK_REGISTRY/}${BUILDER_NAME}:${BUILDER_TAG_PACKAGE}"
        echo "::set-env name=BUILDER_ID_BASE::${BUILDER_ID_BASE}"
        echo "::set-env name=BUILDER_ID_INC::${BUILDER_ID_INC}"
        echo "::set-env name=BUILDER_ID_PACKAGE::${BUILDER_ID_PACKAGE}"

        echo "::set-env name=DK_IMAGE_BASE::${BUILDER_ID_PACKAGE}"
        echo "::set-env name=DK_IMAGE_NAME::${BUILDER_NAME}"
        echo "::set-env name=DK_IMAGE_TAG::${BUILDER_TAG_PACKAGE}"

        for var_dockerfile in ${!DOCKERFILE_@}; do
          eval ${var_dockerfile}="Dockerfiles/${!var_dockerfile}"
          echo "::set-env name=${var_dockerfile}::${!var_dockerfile}"
        done
        echo "::set-env name=DK_DOCKERFILE::${DOCKERFILE_PACKAGE}"
        
        OPT_UPDATE_FEEDS=0
        [ "x${{ (github.event_name == 'push' && contains(github.event.head_commit.message, '#update_feeds#')) || github.event.client_payload.update_feeds || github.event.deployment.payload.update_feeds }}" != "xtrue" ] || OPT_UPDATE_FEEDS=1
        echo "::set-env name=OPT_UPDATE_FEEDS::${OPT_UPDATE_FEEDS}"

        OPT_USE_BASE=0
        [ "x${{ (github.event_name == 'push' && contains(github.event.head_commit.message, '#use_base#')) || github.event.client_payload.use_base || github.event.deployment.payload.use_base }}" != "xtrue" ] || OPT_USE_BASE=1
        echo "::set-env name=OPT_USE_BASE::${OPT_USE_BASE}"

        OPT_USE_INC=0
        [ "x${{ (github.event_name == 'push' && contains(github.event.head_commit.message, '#use_inc#')) || github.event.client_payload.use_inc || github.event.deployment.payload.use_inc }}" != "xtrue" ] || OPT_USE_INC=1
        echo "::set-env name=OPT_USE_INC::${OPT_USE_INC}"

        OPT_DEBUG=0
        [ "x${{ (github.event_name == 'push' && contains(github.event.head_commit.message, '#debug#')) || github.event.client_payload.debug || github.event.deployment.payload.debug }}" != "xtrue" ] || OPT_DEBUG=1
        echo "::set-env name=OPT_DEBUG::${OPT_DEBUG}"

        OPT_PUSH_WHEN_FAIL=0
        [ "x${{ (github.event_name == 'push' && contains(github.event.head_commit.message, '#push_when_fail#')) || github.event.client_payload.push_when_fail || github.event.deployment.payload.push_when_fail }}" != "xtrue" ] || OPT_PUSH_WHEN_FAIL=1
        echo "::set-env name=OPT_PUSH_WHEN_FAIL::${OPT_PUSH_WHEN_FAIL}"

        [ "x${TEST}" = "x1" ] || scripts/cleanup.sh

    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - name: Configure docker
      run: |
        . docker.sh
        configure_docker
        login_to_registry
        touch .start_timestamp

    - name: Check if using latest base builder
      run: |
        . docker.sh
        # temporarily disable failure guarder
        set +eo pipefail
          docker buildx imagetools inspect "${BUILDER_ID_PACKAGE}"
          ret_val=$?
        set -eo pipefail
        if [ "x${OPT_USE_BASE}" = "x1" -o "x${OPT_USE_INC}" = "x1" -o "x${ret_val}" != "x0" ]; then
          BUILDER_ID_SELECTED="${BUILDER_ID_BASE}"
          if [ "x${OPT_USE_INC}" = "x1" ]; then
            if [ "x${OPT_USE_BASE}" = "x1" ]; then
              echo "::error::You cannot use both 'use_base' and 'use_inc'" >&2
              exit 1
            fi
            BUILDER_ID_SELECTED="${BUILDER_ID_INC}"
          fi

          echo "Creating incremental builder '${BUILDER_ID_PACKAGE}' from '${BUILDER_ID_SELECTED}'"
          set +eo pipefail
            docker buildx imagetools inspect "${BUILDER_ID_SELECTED}"
            ret_val=$?
          set -eo pipefail
          if [ "x${ret_val}" != "x0" ]; then
            echo "::error::Base/incremental builder '${BUILDER_ID_SELECTED}' does not exist, please run 'build-base'/'build-inc' job" >&2
            exit 1
          fi

          create_remote_tag_alias "${BUILDER_ID_SELECTED}" "${BUILDER_ID_PACKAGE}"
        fi

    - name: Download last incremental builder
      run: |
        . docker.sh
        pull_image

    # Allow intermediate customization
    - name: Debug set, wait for SSH connection (timeout 5min)
      if: env.OPT_DEBUG == '1'
      env:
        TIMEOUT_MIN: 5
        TMATE_DOCKER_IMAGE: ${{env.DK_LAST_BUILD_TARGET}}
      uses: tete1030/debugger-action@my

    - name: Update repo and packages
      run: |
        . docker.sh
        build_image clone

    - name: Apply customizations
      run: |
        . docker.sh
        build_image custom

    - name: Download packages
      run: |
        . docker.sh
        build_image download

    - name: Print disk space
      run: df -h

    - name: Compile packages
      run: |
        . docker.sh
        build_image compile

    - name: Print disk space
      run: df -h

    - name: Upload current builder
      if: (!cancelled()) && (success() || env.OPT_PUSH_WHEN_FAIL == '1')
      run: |
        . docker.sh
        push_image_and_cache

    - name: Copy out bin directory
      id: copydir
      if: (!cancelled())
      run: |
        . docker.sh
        if [ ! -d "$(pwd)/openwrt" ]; then
          mkdir "$(pwd)/openwrt"
        fi
        copy_files /home/builder/openwrt/bin "$(pwd)/openwrt/bin"
        echo "::set-output name=status::success"

    - name: Filter out firmware files
      id: organize_1
      if: steps.copydir.outputs.status == 'success' && !cancelled()
      run: |
        shopt -s extglob
        cd openwrt/bin/targets/*/*
        all_extra_files=( !(packages) )
        rm -rf "${all_extra_files[@]}"
        echo "::set-output name=status::success"

    - name: Upload packages
      uses: actions/upload-artifact@master
      if: steps.organize_1.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_packages
        path: openwrt/bin

    - name: Filter out old packages
      id: organize_2
      if: steps.organize_1.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        find . -type f -not -newer ../../../../../.start_timestamp -exec rm -f {} \;
        echo "::set-output name=status::success"

    - name: Upload new packages
      uses: actions/upload-artifact@master
      if: steps.organize_2.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_new_packages
        path: openwrt/bin

    # failure checking
    - name: Failed/debug set, wait for SSH connection (timeout 30min. You are safe to cancel the job now.)
      if: failure() || env.OPT_DEBUG == '1'
      env:
        TMATE_DOCKER_IMAGE: ${{env.DK_LAST_BUILD_TARGET}}
      uses: tete1030/debugger-action@my

  build-direct:
    runs-on: ubuntu-18.04
    if: |
      (
        github.event_name == 'push'
        && contains(github.event.head_commit.message, '#build-direct#')
      ) || (
        github.event_name == 'repository_dispatch'
        && github.event.action == 'build-direct'
      ) || (
        github.event_name == 'deployment'
        && github.event.deployment.task == 'build-direct'
      )
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialize environment
      run: |
        OPT_DEBUG=0
        [ "x${{ (github.event_name == 'push' && contains(github.event.head_commit.message, '#debug#')) || github.event.client_payload.debug || github.event.deployment.payload.debug }}" != "xtrue" ] || OPT_DEBUG=1
        echo "::set-env name=OPT_DEBUG::${OPT_DEBUG}"

        OPT_PUSH_WHEN_FAIL=0
        [ "x${{ (github.event_name == 'push' && contains(github.event.head_commit.message, '#push_when_fail#')) || github.event.client_payload.push_when_fail || github.event.deployment.payload.push_when_fail }}" != "xtrue" ] || OPT_PUSH_WHEN_FAIL=1
        echo "::set-env name=OPT_PUSH_WHEN_FAIL::${OPT_PUSH_WHEN_FAIL}"

        scripts/cleanup.sh
        scripts/initenv.sh

    - name: Clone all source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run:
        scripts/update_repo.sh
        OPT_UPDATE_FEEDS=1 scripts/update_feeds.sh

    - name: Load custom configuration
      run: scripts/customize.sh

    # Allow intermediate customization
    - name: Debug set, wait for SSH connection (timeout 5min)
      if: env.OPT_DEBUG == '1'
      env:
        TIMEOUT_MIN: 5
      uses: tete1030/debugger-action@my

    - name: Download packages
      run: scripts/download.sh

    - name: Print disk space
      run: df -h

    - name: Multi-thread compile
      id: mtcompile
      continue-on-error: true
      run: |
        echo "::set-output name=started::yes"
        scripts/compile.sh m
        echo "::set-output name=success::yes"

    # previous failure will cause current job failure
    - name: Single-thread compile
      if: steps.mtcompile.outputs.started == 'yes' && steps.mtcompile.outputs.success != 'yes'
      run: scripts/compile.sh s

    - name: Print disk space
      run: df -h

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: (!cancelled())
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: (!cancelled())
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "::set-output name=status::success"

    - name: Upload firmware
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    # failure checking
    - name: Failed/debug set, wait for SSH connection (timeout 30min. You are safe to cancel the job now.)
      if: failure() || env.OPT_DEBUG == '1'
      uses: tete1030/debugger-action@my
